{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"UM3EN","rootPoint":{"objectClass":"CGPoint","x":408.99999999999994,"y":1257.5},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"9B526","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"7AR8D","lineColorHex":"#DC306C","text":"freemem() ： 返回空闲的系统内存量"},"1":{"objectClass":"MindNode","ID":"E3H16","lineColorHex":"#DC306C","text":"totalmem(): 返回系统的内存总量"},"2":{"objectClass":"MindNode","ID":"9GW66","lineColorHex":"#EEE8CD","text":"cpu-stat: node插件，返回所有内核在接下来1000毫秒内的cpu使用率百分比","remark":"//请求cpu-stat\nvar cpuStat = require('cpu-stat');\n\n//默认情况下返回cpu使用率\ncpuStat.usagePercent(function(err, percent, seconds) {\n    if (err) {\n      return console.log(err);\n    }\n     \n    console.log(seconds);\n});","markType":7},"objectClass":"NSArray"},"text":"os"},"1":{"objectClass":"MindNode","ID":"8UQLI","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"77S2V","lineColorHex":"#BF58F5","text":"readFile(): 异步读取文件"},"1":{"objectClass":"MindNode","ID":"R8744","lineColorHex":"#BF58F5","text":"readFileSync(): 读取文件"},"2":{"objectClass":"MindNode","ID":"S9P64","lineColorHex":"#EEE8CD","text":"util: node自带模块，返回promise（）","remark":"const { promisify } = require('util');\nconst readFile = promisify(fs.readFile);\n\nreadFile('./02-cpumen-export.js').then(data => {\n    console.log('promise返回数据' + data)\n})","markType":7},"objectClass":"NSArray"},"text":"fs"},"2":{"objectClass":"MindNode","ID":"AIDE1","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"74O43","lineColorHex":"#26BBFF","text":"alloc(): 创建新 Buffer 的所需长度"},"1":{"objectClass":"MindNode","ID":"74IY8","lineColorHex":"#26BBFF","text":"from():数组 array 分配一个新的 Buffer"},"2":{"objectClass":"MindNode","ID":"6NDO8","lineColorHex":"#26BBFF","text":"concat(): buffer拼接"},"3":{"objectClass":"MindNode","ID":"WFL1F","lineColorHex":"#26BBFF","text":"write(): 写入 buf 的字符串"},"objectClass":"NSArray"},"text":"buffer"},"3":{"objectClass":"MindNode","ID":"PWZ46","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"LDX2T","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"B85AT","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"SO2N2","lineColorHex":"#37C45A","text":"Request（请求）：对象返回","remark":"// Request\n   req.baseUrl 基础路由地址\n   req.body post发送的数据解析出来的对象\n   req.cookies 客户端发送的cookies数据\n   req.hostname 主机地址 去掉端口号\n   req.ip 查看客户端的ip地址\n   req.ips 代理的IP地址\n   req.originalUrl 对req.url的一个备份\n   req.params 在使用/:id/:name 匹配params\n   req.path 包含请求URL的路径部分\n   req.protocol http 或https协议\n   req.query 查询字符串解析出来的对象 \n    username=zhangsan&password=123 { username:zhangsan }\n   req.route 当前匹配的路由 正则表达式\n   req.params 获取路由匹配的参数\n   req.get 获取请求header里的参数\n   req.is 判断请求的是什么类型的文件\n   req.param(key名称) 用来获取某一个路由匹配的参数"},"objectClass":"NSArray"},"text":"（Request,Response） => 参数","linkPaths":{"0":{"objectClass":"NodeLinkPath","ID":"7CVHB","ctrlPoint":{"objectClass":"CGPoint","x":0,"y":0}},"objectClass":"NSArray"}},"objectClass":"NSArray"},"text":"createServer():返回新建的 http.Server 实例"},"1":{"objectClass":"MindNode","ID":"76C7S","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"7CVHB","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"0917B","lineColorHex":"#37C45A","text":"Response（返回）：对象返回数据","remark":"    // res.headersSent 查看http响应是否响应了http头\n    // res.append(名称,value) 追加http响应头\n    // res.attachment(文件路径) 响应文件请求 \n    // res.cookie() 设置cookie\n\n\n //res.setHeader('Content-Type','text/html;charset=utf8')\n    // res.append('Content-Type','text/html;charset=utf8')\n    // res.append('hehe','1008')\n    // res.append('haha','1008')\n    // res.attachment('./xx.zip') //Content-Disposition: attachment; filename=\"xx.zip\"\n    // res.clearCookie(cookiename) 删除cookie\n    // res.cookie('zhangsan','lisi') 设置cookie\n    // res.cookie('zhangsan1','lisi2',{\n    //     maxAge:900000,\n    //     httpOnly:true,\n    //     path: '/admin', \n    //     secure: true,\n    //     signed:true\n    // })\n    // res.clearCookie('zhangsan')\n \n    // res.download(文件的path路径) 跟attachment类似 用来处理文件下载的 参数是文件地址\n    // res.end http模块自带的\n    // res.format()协商请求文件类型 format匹配协商的文件类型\n    // res.format({\n    //     'text/plain': function(){\n    //         res.send('hey');\n    //     },\n        \n    //     'text/html': function(){\n    //         res.send('<p>hey</p>');\n    //     },\n        \n    //     'application/json': function(){\n    //         res.send({ message: 'hey' });\n    //     },\n        \n    //     'default': function() {\n    //         // log the request and respond with 406\n    //         res.status(406).send('Not Acceptable');\n    //     }\n    // });\n \n    // res.get('key') 获取响应header数据\n    // res.json() 返回json数据 会自动设置响应header Content-type 为json格式 application/json\n \n    // res.json({\n    //     xx:100\n    // })\n \n    // res.json({\n    //     xx:100\n    // })\n \n    // jsonp 利用的就是浏览器加载其他服务器的文件不会存在跨域问题\n    // ajax请求就会有跨域问题\n \n    // res.setHeader('Content-Type','text/javascript;charsert=utf8')\n    // res.end(`typeof ${req.query.callback} == 'function' ? ${req.query.callback}({aa:100}):null`)\n \n    // res.jsonp({aaa:100})\n \n \n    // 重定向 把访问的地址跳转到另一个地址上\n    // res.redirect(301,'/api/aes')\n \n    // express jade\n    // res.render('index',{title:\"hehe\",test:\"23\"})\n    // res.send('') 发送数据 可以是任意类型的数据\n    // res.sendFile() 发送文件的 \n    // res.sendStatus(200) 设置发送时的状态码\n    // res.set('Content-Type', 'text/plain') //设置响应header\n    // res.status(200) // 设置状态码\n    // res.type('') // 直接设置响应的文件类型\n \n    // res.type('pdf')\n \n    // res.send({aa:100})\n    // res.end('ok')\n    // res.end({aa:100})\n \n    // res.end('你好')\n \n \n    // res.end(req.get('Accept-Language'))\n    // res.json({\n    //     is:req.is('text/html')\n    // })\n \n    // res.json({\n    //     type:req.baseUrl,\n    //     hostname:req.hostname,\n    //     // ip:req.ip,\n    //     // ips:req.ips,\n    //     // route:req.route,\n    //     ct:req.get('Accept'),\n    //     cs:'22'"},"objectClass":"NSArray"},"text":"（Request,Response） => 参数"},"objectClass":"NSArray"},"text":"express:创建微型服务 安装：npm install express --save","remark":"const express = require('express');\n\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.end('hellowword!!')\n})\napp.get('/users', (req, res) => {\n    res.end(JSON.stringify({ name: 'marry' }))\n})\napp.listen(3000, () => {\n    console.log('open the servers')\n})"},"objectClass":"NSArray"},"text":"http"},"4":{"objectClass":"MindNode","ID":"1TG88","lineColorHex":"#1BD6E7","text":"express微型服务"},"5":{"objectClass":"MindNode","ID":"57956","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"5A724","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"BWMGE","lineColorHex":"#FFC700","text":"Koa 中文文档 请求(Request)","url":"https://segmentfault.com/a/1190000011839832"},"objectClass":"NSArray"},"text":"koa"},"1":{"objectClass":"MindNode","ID":"T8DN7","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"67X35","lineColorHex":"#FFC700","text":" router():路由中间件"},"objectClass":"NSArray"},"text":"koa-router：路由，安装 npm install koa-router "},"2":{"objectClass":"MindNode","ID":"5HCU3","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"X7A27","lineColorHex":"#FFC700","text":"引入// 静态资源使用\nconst static = require('koa-static');"},"1":{"objectClass":"MindNode","ID":"F1805","lineColorHex":"#FFC700","text":"使用\napp.use(static(__dirname + '/public'));\n即在文件/public下的文件，都可以访问到，如text.html,打开localhost：3000/text.html"},"objectClass":"NSArray"},"text":"koa-static静态资源服务：安装  npm install koa-static","remark":"// 静态服务\nconst static = require(\"koa-static\");\napp.use(static(__dirname + '/public'));"},"3":{"objectClass":"MindNode","ID":"FN4U4","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"55863","lineColorHex":"#FFC700","text":"registerHelper:自定义助手","remark":"const hbs = require(\"koa-hbs\");\nconst moment = require(\"moment\");\n// 创建自定义助手，在任何hbs模板内使用\nhbs.registerHelper(\"date\", (date, pattern) => {\n    try {\n        return moment(date).format(pattern);\n    } catch (error) {\n        return \"\";\n    }\n});\n\n// 引入自定义助手\nconst helper = require('./utils/helpers.js')\n\n// 使用自定义助手（hbs文件中使用 名字为data 过滤日期）\n{{!-- 5.循环 --}}\n<ul>\n    {{#each users}}\n    <li>{{username}} - {{age}} - \n        {{date birth 'YYYY/MM/DD'}}</li>\n    {{/each}}\n</ul>"},"1":{"objectClass":"MindNode","ID":"7RVYT","lineColorHex":"#FFC700","text":"hbs模板使用","remark":"node/05"},"objectClass":"NSArray"},"text":"koa-hbs模板引擎: 安装npm i koa-hbs@next -s"},"4":{"objectClass":"MindNode","ID":"26756","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"XWM52","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"7U5V6","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"NRSC7","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"BBB3C","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"C4Q76","lineColorHex":"#FFC700","text":"安装地址：https://github.com/MicrosoftArchive/redis/releases"},"1":{"objectClass":"MindNode","ID":"3L2R8","lineColorHex":"#FFC700","text":"node中安装插件npm i redis; npm i koa-redis;"},"2":{"objectClass":"MindNode","ID":"2SWU7","lineColorHex":"#FFC700","text":"redis使用：","remark":"// redis 引用\nconst koa = require('koa')\nconst app = new koa()；\nconst session = require('koa-session')\n\nconst redisStore = require('koa-redis')\nconst redis = require('redis')\nconst redisClient = redis.createClient(6379, 'localhost')\n\n// promise 化\nconst wrapper = require('co-redis')\nconst client = wrapper(redisClient)\n\napp.keys = ['some secret']\n\nconst SESS_CONFIG = {\n    key: 'kkb:sess', // 名\n    // maxAge: 8640000, // 有效期\n    // httpOnly: true, // 服务器有效\n    // signed: true // 签名\n    store: redisStore({ client })\n}\n\napp.use(session(SESS_CONFIG, app))\n\napp.use(ctx => {\n    // 查看redis\n    redisClient.keys('*', (err, keys) => {\n        console.log('keys:', keys)\n        keys.forEach(key => {\n            redisClient.get(key, (err, val) => {\n                console.log(val)\n            })\n        })\n    })\n\n    if (ctx.path === '/favicon.ico') return\n    let n = ctx.session.count || 0\n    ctx.session.count = ++n\n    ctx.body = '第' + n + '次访问'\n})\napp.listen(3000)"},"objectClass":"NSArray"},"text":"redis数据库"},"objectClass":"NSArray"},"text":"共享式session等，鉴权存储：","remark":"Cookie，session等存在内存，不能共享，可扩展性不强，解决办法:\n\n存在数据库中\n存在专用键值服务器，如redis","url":"https://www.jianshu.com/p/8f4cc45d712e"},"objectClass":"NSArray"},"text":"Session、 cookie","remark":"用户登录的时候，服务端生成一个会话和一个id标识\n会话id在客户端和服务端之间通过cookie进行传输\n服务端通过会话id可以获取到会话相关的信息，然后对客户端的请求进行响应；如果找不到有效的会话，那么认为用户是未登陆状态\n会话会有过期时间，也可以通过一些操作（比如登出）来主动删除\n"},"1":{"objectClass":"MindNode","ID":"3E185","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"3V202","lineColorHex":"#FFC700","text":"安装：npm install jsonwebtoken\nkoa中间件：npm install koa-jwt"},"objectClass":"NSArray"},"text":"Token","remark":"用户登录的时候，服务端生成一个token返回给客户端\n客户端后续的请求都带上这个token\n服务端解析token获取用户信息，并响应用户的请求\ntoken会有过期时间，客户端登出的时候也会废弃token，但是服务端不需要任何操作\n"},"2":{"objectClass":"MindNode","ID":"DWEF2","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"FG84X","lineColorHex":"#FFC700","text":"github授权","url":"https://www.jianshu.com/p/78d186aeb526"},"objectClass":"NSArray"},"text":"oAth：第三方授权"},"objectClass":"NSArray"},"text":"鉴权的几种方式："},"1":{"objectClass":"MindNode","ID":"3797O","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"H73VH","lineColorHex":"#FFC700","text":"1. 服务器在接受客户端首次访问时在服务器端创建seesion，然后保存seesion(我们可以将seesion保存在内存中，也可以保存在redis中，推荐使用后者)，然后给这个session生成一个唯一的标识字符串,然后响应头中种下这个唯一标识字符串。"},"1":{"objectClass":"MindNode","ID":"4X0NW","lineColorHex":"#FFC700","text":"2. 签名。这一步通过秘钥对sid进行签名处理，避免客户端修改sid。（非必需步骤）"},"2":{"objectClass":"MindNode","ID":"54716","lineColorHex":"#FFC700","text":"3. 浏览器中收到请求响应的时候会解析响应头，然后将sid保存在本地cookie中，浏览器在下次http请求的请求头中会带上该域名下的cookie信息，"},"3":{"objectClass":"MindNode","ID":"882W0","lineColorHex":"#FFC700","text":"4. 服务器在接受客户端请求时会去解析请求头cookie中的sid，然后根据这个sid去找服务器端保存的该客户端的session，然后判断该请求是否合法。"},"objectClass":"NSArray"},"text":"鉴权原理："},"2":{"objectClass":"MindNode","ID":"6Y187","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"JV422","lineColorHex":"#FFC700","text":"koa-session: 本地存储  npm i koa-session -S (中间件)"},"1":{"objectClass":"MindNode","ID":"N0RDJ","lineColorHex":"#FFC700","text":"koa-redis：与koa-generic-session（koa的通用会话中间件）一起使用。","url":"http://npm.taobao.org/package/koa-redis"},"objectClass":"NSArray"},"text":"插件工具："},"objectClass":"NSArray"},"text":"koa鉴权"},"5":{"objectClass":"MindNode","ID":"36ORE","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"6581U","lineColorHex":"#FFC700","children":{"0":{"objectClass":"MindNode","ID":"5DEFP","lineColorHex":"#FFC700","text":"使用：var bodyParser = require('koa-bodyparser');\napp.use(bodyParser());","url":"https://www.cnblogs.com/myzy/p/6543696.html"},"objectClass":"NSArray"},"text":"1.POST请求获取不到body中request信息：\n","remark":"koa首先处理POST请求的body必须使用另一个中间件koa-bodyparser，你没有导入，另外你中间件的顺序有问题。","url":"https://www.jianshu.com/p/8f4cc45d712e"},"objectClass":"NSArray"},"text":"错误总结："},"objectClass":"NSArray"},"text":"koa 微型服务"},"objectClass":"NSArray"},"text":"node"}}